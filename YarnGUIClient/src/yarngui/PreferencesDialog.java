
package yarngui;

import javax.swing.JOptionPane;

/**
 * This class provides a subclass of JFrame in order to create and display a 
 * preferences dialog window to the user.  The preferences dialog window 
 * contains configuration details which the user can change to better suit the 
 * client to their needs.  The preferences dialog also launches instances of the 
 * SSL and proxy preferences classes if necessary.  This class calls the 
 * configuration class methods to read write configuration values where 
 * necessary.  
 * @author Michael Telford
 */
public class PreferencesDialog extends javax.swing.JFrame {
    
    private GUI gui = null;
    private ProxyPreferencesDialog proxyPref = null;
    private SSLPreferencesDialog sslPref = null;

    /**
     * Constructor for the preferences dialog.  Initialises and displays the 
     * preferences dialog to the user.  Also sets the configuration values to 
     * show the currently used preferences.  Uses the parent component (the main 
     * GUI dialog) to position itself on top.  
     * @param component The parent component used in the positioning of the 
     * preferences dialog.  
     */
    public PreferencesDialog(GUI component){
        this.gui = component;
        initComponents();
        this.setValuesAndDisplay();
    }

    /** This method is called from within the constructor to
     * initialise the dialog.  This code has been generated automatically by 
     * the Netbeans Swing functionality.  
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        preferencesLabel = new javax.swing.JLabel();
        enterSendLabel = new javax.swing.JLabel();
        pressEnterToSend = new javax.swing.JCheckBox();
        playAlertSoundLabel = new javax.swing.JLabel();
        playAlertSound = new javax.swing.JCheckBox();
        localPortLabel = new javax.swing.JLabel();
        localPort = new javax.swing.JTextField();
        sendToPortLabel = new javax.swing.JLabel();
        sendToPort = new javax.swing.JTextField();
        connectTimeoutLabel = new javax.swing.JLabel();
        connectTimeout = new javax.swing.JTextField();
        save = new javax.swing.JButton();
        proxy = new javax.swing.JButton();
        ssl = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Preferences");
        setAlwaysOnTop(true);
        setResizable(false);

        preferencesLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        preferencesLabel.setText("Yarn Messenger Configuration Preferences");

        enterSendLabel.setText("Press Enter To Send :");

        pressEnterToSend.setSelected(true);
        pressEnterToSend.setToolTipText("");

        playAlertSoundLabel.setText("Play Alert Sound :");

        playAlertSound.setSelected(true);

        localPortLabel.setText("Local Port (To Bind Onto) : ");

        localPort.setEditable(false);

        sendToPortLabel.setText("Send To Port (Server Listening Port) : ");

        connectTimeoutLabel.setText("Connect Timeout (Milliseconds) : ");

        save.setText("Save");
        save.setToolTipText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        proxy.setText("Proxy");
        proxy.setToolTipText("Proxy");
        proxy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proxyActionPerformed(evt);
            }
        });

        ssl.setText("SSL");
        ssl.setToolTipText("Proxy");
        ssl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sslActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pressEnterToSend, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(playAlertSound, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(6, 6, 6))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(sendToPortLabel)
                                    .addComponent(connectTimeoutLabel)
                                    .addComponent(localPortLabel)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(proxy, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ssl, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(localPort, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(connectTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sendToPort, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(preferencesLabel)
                            .addComponent(enterSendLabel)
                            .addComponent(playAlertSoundLabel))
                        .addContainerGap(13, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(preferencesLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(enterSendLabel)
                    .addComponent(pressEnterToSend))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(playAlertSoundLabel)
                    .addComponent(playAlertSound))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(localPortLabel)
                    .addComponent(localPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendToPortLabel)
                    .addComponent(sendToPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectTimeoutLabel)
                    .addComponent(connectTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proxy)
                    .addComponent(ssl)
                    .addComponent(save))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Action method for the save button.  Calls the save preferences method.  
     * @param evt The dialog event.  
     */
    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        this.savePreferences();
    }//GEN-LAST:event_saveActionPerformed

    /**
     * Action method for the proxy button.  Initialises (if necessary) and 
     * displays the proxy dialog to the user.
     * @param evt The dialog event.  
     */
    private void proxyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proxyActionPerformed
        try {
            if (!this.proxyPref.isVisible())
                this.proxyPref = new ProxyPreferencesDialog(this);
            else
                this.proxyPref.requestFocus();
        }
        catch (NullPointerException npe){
            this.proxyPref = new ProxyPreferencesDialog(this);
        }
    }//GEN-LAST:event_proxyActionPerformed

    /**
     * Action method for the SSL button.  Initialises (if necessary) and 
     * displays the SSL (secure communications) dialog to the user.
     * @param evt The dialog event.  
     */
    private void sslActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sslActionPerformed
        try {
            if (!this.sslPref.isVisible())
                this.sslPref = new SSLPreferencesDialog(this);
            else
                this.sslPref.requestFocus();
        }
        catch (NullPointerException npe){
            this.sslPref = new SSLPreferencesDialog(this);
        }
    }//GEN-LAST:event_sslActionPerformed

    /**
     * Overridden method used to dispose or close the preferences dialog.  An 
     * override was required to close either the proxy and/or the SSL dialog(s) 
     * before closing this preferences dialog.  
     */
    @Override
    public void dispose(){
        try {
            if (this.proxyPref.isVisible())
                this.proxyPref.dispose();
            if (this.sslPref.isVisible())
                this.sslPref.dispose();
        }
        catch (NullPointerException npe){}
        super.dispose();
    }
    
    /**
     * This method sets the configuration values currently being used by the 
     * client and displays the preferences dialog to the user.  
     */
    private void setValuesAndDisplay(){
        this.pressEnterToSend.setSelected(Configuration.enterSend);
        this.playAlertSound.setSelected(Configuration.soundAlert);
        this.localPort.setText("N/A");
        this.sendToPort.setText(String.valueOf(Configuration.serverListeningPort));
        this.connectTimeout.setText(String.valueOf(Configuration.connectTimeout));
        this.displayDialog();
    }
    
    /**
     * Method which displays the preferences dialog to the user having firstly 
     * set the dialogs position.  If connected at the time of this methods call 
     * then the client must be disconnected before a save of preferences can be 
     * performed.  Therefore the user is asked if they'd like to disconnect and 
     * save or cancel the save all together.  
     */
    private void displayDialog(){
        this.gui.setDialogPosition(this);
        if (this.gui.isConnected()){
            int result = this.showDisconnectDialog();
            if (result == JOptionPane.YES_OPTION){
                this.gui.disconnectDoClick();
                this.setVisible(true);
            }
        }
        else
            this.setVisible(true);
    }
    
    /**
     * This method uses the JOptionPane static method to display a yes or no 
     * request to the user about whether or not they'd like to disconnect from 
     * the server.  
     * @return True if the user wishes to disconnect, false otherwise.  
     */
    private int showDisconnectDialog(){
        String text =
                "Preferences can only be changed when\n"
                + "disconnected from a Yarn Server...\n\n"
                + "Do you want to disconnect now??";
        return JOptionPane.showConfirmDialog(this.gui, text,
                "Client is connected to server", JOptionPane.YES_NO_OPTION);
    }

    /**
     * This method is used to save the preference values set by the user using 
     * the preferences dialog.  This method also sets any changed SSL and Proxy 
     * preferences.  The user is alerted if the changes cannot be saved for 
     * reasons such as value format errors or a missing configuration file etc. 
     */
    private void savePreferences(){
        boolean b0 = true;
        boolean b1 = true;
        int i0 = 0;
        int i1 = 0;
        int i2 = 0;
        
        try {
            b0 = this.pressEnterToSend.isSelected();
            b1 = this.playAlertSound.isSelected();
            //i0 = Integer.parseInt(this.localPort.getText());
            i1 = Integer.parseInt(this.sendToPort.getText());
            i2 = Integer.parseInt(this.connectTimeout.getText());
        }
        catch (NumberFormatException nfe){
            this.dispose();
            this.showErrorDialog();
            return;
        }
        this.dispose();

        // If connected when you try and save preferences...
        if (this.gui.isConnected()){
            int result = this.showDisconnectDialog();
            if (result == JOptionPane.YES_OPTION)
                this.gui.disconnectDoClick();
            else {
                this.showNoSaveDialog();
                return;
            }
        }
        
        Configuration.enterSend = b0;
        Configuration.soundAlert = b1;
        //Configuration.localPort = i0;
        Configuration.serverListeningPort = i1;
        Configuration.connectTimeout = i2;
        
        // Sets the Configuration proxy variables if they've been changed.
        this.setProxyPreferencesChanges();
        
        // Sets the SSL variables if they've been changed.
        this.setSslPreferencesChanges();
        
        // Write changes to config file (if possible) also.
        boolean result = Configuration.writeConfigValues();
        if (result)
            this.showSuccessfulSaveDialog();
        else
            GUI.showCannotSaveConfigChangesDialog();
    }
    
    /**
     * This method sets the configuration values to that of the SSL preference 
     * values if changes have been made.  The configuration values can then be 
     * written to file so that they take effect on the next startup.  
     */
    private void setSslPreferencesChanges(){
        try {
            if (this.sslPref.haveChangesBeenMade()){
                Configuration.useSecureComms = sslPref.getUseSsl();
                if (this.sslPref.getTrustStoreFilePath() != null)
                    Configuration.trustStore = this.sslPref.getTrustStoreFilePath();
                if (this.sslPref.getTrustStorePassword() != null)
                    Configuration.trustStorePassword = this.sslPref.getTrustStorePassword();
            }
        }
        catch (NullPointerException npe){}
    }
    
    /**
     * This method sets the configuration values to that of the proxy preference 
     * values if changes have been made.  The configuration values can then be 
     * written to file so that they take effect on the next startup.  
     */
    private void setProxyPreferencesChanges(){
        try {
            if (this.proxyPref.haveChangesBeenMade()){
                Configuration.useProxy = proxyPref.getUseProxy();
                if (this.proxyPref.getProxyAddress() != null)
                    Configuration.proxyAddr = this.proxyPref.getProxyAddress();
                if (this.proxyPref.getProxyPort() != 0)
                    Configuration.proxyPort = this.proxyPref.getProxyPort();
                if (this.proxyPref.getProxyUsername() != null)
                    Configuration.proxyUname = this.proxyPref.getProxyUsername();
                if (this.proxyPref.getProxyPassword() != null)
                    Configuration.proxyPword = this.proxyPref.getProxyPassword();
            }
        }
        catch (NullPointerException npe){}
    }

    /**
     * This method uses the JOptionPane static method showMessageDialog to 
     * display to the user that the preferences have not been saved.  
     */
    private void showNoSaveDialog(){
        String text =
                "Yarn preferences have not been changed";
        JOptionPane.showMessageDialog(this.gui, text,
                "Preferences Not Saved", JOptionPane.OK_OPTION);
    }
    
    /**
     * This method uses the JOptionPane static method showMessageDialog to 
     * display to the user that the preferences have been saved successfully.  
     */
    private void showSuccessfulSaveDialog(){
        String text = "Yarn preferences have been changed";
        JOptionPane.showMessageDialog(this.gui, text,
                "Preferences Saved", JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * This method uses the JOptionPane static method showMessageDialog to 
     * display to the user that there has been a format error when parsing the 
     * entered preference values.  
     */
    private void showErrorDialog(){
        String text = "Incorrect preferences entered\n\nPreferences not changed";
        JOptionPane.showMessageDialog(this.gui, text,
                "Preferences Error", JOptionPane.OK_OPTION);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField connectTimeout;
    private javax.swing.JLabel connectTimeoutLabel;
    private javax.swing.JLabel enterSendLabel;
    private javax.swing.JTextField localPort;
    private javax.swing.JLabel localPortLabel;
    private javax.swing.JCheckBox playAlertSound;
    private javax.swing.JLabel playAlertSoundLabel;
    private javax.swing.JLabel preferencesLabel;
    private javax.swing.JCheckBox pressEnterToSend;
    private javax.swing.JButton proxy;
    private javax.swing.JButton save;
    private javax.swing.JTextField sendToPort;
    private javax.swing.JLabel sendToPortLabel;
    private javax.swing.JButton ssl;
    // End of variables declaration//GEN-END:variables
}