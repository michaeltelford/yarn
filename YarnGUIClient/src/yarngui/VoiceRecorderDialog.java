
package yarngui;

import java.awt.Point;
import java.io.File;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JSlider;

/**
 * This class provides a subclass of JFrame in order to create and display a 
 * voice recorder dialog window to the user.  The recorder dialog window 
 * contains functionality which allows a user to record their own voice or any 
 * other desired sounds.  
 * @author Michael Telford
 */
public class VoiceRecorderDialog extends javax.swing.JFrame {
    
    // Record time constraints.  
    private final static int MINIMUM_RECORD_TIME_LIMIT = 1;
    private final static int MAXIMUM_RECORD_TIME_LIMIT = 30;
    private final static int DEFAULT_RECORD_TIME_LIMIT = 5;
    
    private Thread timer;
    private VoiceRecorder recorder;
    private ShareDialog parent;

    /**
     * This constructor initialises the dialog to record voice recordings and 
     * play them back before selecting them for a voice share to other clients. 
     * This constructor is used to initialise the dialog components and voice 
     * recorder instance before setting the record time limits, positioning and 
     * displaying the dialog to the user.  
     * @param parentComp The parent component used in the positioning of the 
     * preferences dialog.
     */
    public VoiceRecorderDialog(ShareDialog parentComp){
        initComponents();
        
        this.recorder = new VoiceRecorder("temp_folder");
        this.recordTimeLimitSlider.setMinimum(VoiceRecorderDialog.MINIMUM_RECORD_TIME_LIMIT);
        this.recordTimeLimitSlider.setMaximum(VoiceRecorderDialog.MAXIMUM_RECORD_TIME_LIMIT);
        this.recorder.setRecordTimeLimitInSeconds(VoiceRecorderDialog.DEFAULT_RECORD_TIME_LIMIT);
        this.recordTimeLimitSlider.setValue(this.recorder.getRecordTimeLimitInSeconds());
        
        this.parent = parentComp;
        this.setDialogPosition(this.parent); // GUI is not the parent.
        this.setVisible(true);
        this.label.requestFocus();
    }
    
    /**
     * This constructor initialises the dialog to play the recording file 
     * parameter provided.  
     * This constructor is used to initialise the dialog components and voice 
     * recorder instance before setting the record time limits, positioning and 
     * displaying the dialog to the user.  
     * @param parentComp The parent component used in the positioning of the 
     * preferences dialog.
     */
    public VoiceRecorderDialog(GUI parentComp, File recording){
        initComponents();
        
        this.recorder = new VoiceRecorder(recording.getAbsolutePath());
        this.recordTimeLimitSlider.setMinimum(VoiceRecorderDialog.MINIMUM_RECORD_TIME_LIMIT);
        this.recordTimeLimitSlider.setMaximum(VoiceRecorderDialog.MAXIMUM_RECORD_TIME_LIMIT);
        this.recorder.setRecordTimeLimitInSeconds(VoiceRecorderDialog.DEFAULT_RECORD_TIME_LIMIT);
        this.recordTimeLimitSlider.setValue(this.recorder.getRecordTimeLimitInSeconds());
        
        this.setDialogPosition(parentComp);
        this.disableComponentsForPlaybackOnly(recording.getName());
        this.setVisible(true);
        this.label.requestFocus();
    }
    
    /**
     * This method disables certain components used for recording voice.  This 
     * in effect produces a dialog which is only capable of playing a voice 
     * recording.  
     * @param filename The voice recording file name which can be played.  
     */
    private void disableComponentsForPlaybackOnly(String filename){
        this.setLabelText(filename);
        this.playButton.setEnabled(true);
        this.startButton.setEnabled(false);
        this.selectRecordingButton.setEnabled(false);
        this.recordTimeLimitLabel.setEnabled(false);
        this.recordTimeLimitSlider.setEnabled(false);
    }

    /** This method is called from within the constructor to
     * initialise the dialog.  This code has been generated automatically by 
     * the Netbeans Swing functionality.  
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        selectRecordingButton = new javax.swing.JButton();
        recordTimeLimitSlider = new javax.swing.JSlider();
        recordTimeLimitLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Voice");
        setAlwaysOnTop(true);
        setResizable(false);

        label.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        label.setText("Click start to begin recording");
        label.setFocusable(false);

        startButton.setText("Start");
        startButton.setToolTipText("Start");
        startButton.setMaximumSize(new java.awt.Dimension(75, 23));
        startButton.setMinimumSize(new java.awt.Dimension(75, 23));
        startButton.setPreferredSize(new java.awt.Dimension(75, 23));
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        playButton.setText("Play");
        playButton.setToolTipText("Playback");
        playButton.setEnabled(false);
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        selectRecordingButton.setText("Select Recording");
        selectRecordingButton.setToolTipText("Select Recording");
        selectRecordingButton.setEnabled(false);
        selectRecordingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectRecordingButtonActionPerformed(evt);
            }
        });

        recordTimeLimitSlider.setPaintTicks(true);
        recordTimeLimitSlider.setSnapToTicks(true);
        recordTimeLimitSlider.setToolTipText("");
        recordTimeLimitSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                recordTimeLimitSliderStateChanged(evt);
            }
        });
        recordTimeLimitSlider.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                recordTimeLimitSliderPropertyChange(evt);
            }
        });

        recordTimeLimitLabel.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                recordTimeLimitLabelPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(recordTimeLimitLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(recordTimeLimitSlider, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(selectRecordingButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(recordTimeLimitLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(recordTimeLimitSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(playButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectRecordingButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Action event method for the start button.  Starts a record timer thread 
     * and starts the recorder.  When the timer threads finishes it stops the 
     * recorder.  The timer delay is set by the user interaction with the timer 
     * slider component.  
     * @param evt The dialog event.  
     */
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        
        // Initialise a recording timer thread.
        this.timer = new Thread(new Runnable(){
            @Override
            public void run(){
                try {
                    // + 500 below because the sleep is abit short but the GUI record values are OK.
                    int timeLimit = recorder.getRecordTimeLimitInMilliSeconds() + 500;
                    Thread.sleep(timeLimit);
                } 
                catch (InterruptedException ix){
                    //Logger.getLogger(VoiceRecorderDialog.class.getName()).log(Level.SEVERE, null, ix);
                } 
                catch (Exception ex) {
                    //Logger.getLogger(VoiceRecorderDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
                finally {
                    // Stop the recorder after the record time delay.  
                    recorder.stopRecording();
                    setGuiToFinishedRecording();
                }
            }
         });
        
        // Start the timer and recorder.
        try {
            if (this.displayRecordingDialog()){
                this.timer.start();
                this.recorder.startRecording();
            }
        } catch (Exception ex) {
            //Logger.getLogger(VoiceRecorderDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_startButtonActionPerformed

    /**
     * Action event method for the play button.  Plays the recorded voice file 
     * back to the user.  This is used after a voice recording has been 
     * performed or received as a voice share.  
     * @param evt The dialog event.  
     */
    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        try {
            this.recorder.playSoundRecording();
            Thread.sleep(this.recorder.getRecordingPlaybackDelay());
        }
        catch (Exception ex){
            //Logger.getLogger(VoiceRecorderDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_playButtonActionPerformed

    /**
     * Action event method for the select recording button.  Sets the voice 
     * recording file path and set the voice recording count label.  
     * @param evt The dialog event.  
     */
    private void selectRecordingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectRecordingButtonActionPerformed
        this.parent.setVoiceFilePath(this.recorder.getRecordWavFilePath());
        this.parent.setVoiceTextField("Voice Recording #" + this.parent.getRecordCount());
        this.dispose();
    }//GEN-LAST:event_selectRecordingButtonActionPerformed

    /**
     * Not used.
     * @param evt 
     */
    private void recordTimeLimitLabelPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_recordTimeLimitLabelPropertyChange
        // Not used.
    }//GEN-LAST:event_recordTimeLimitLabelPropertyChange

    /**
     * Not used.  
     * @param evt 
     */
    private void recordTimeLimitSliderPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_recordTimeLimitSliderPropertyChange
        // Not used.
    }//GEN-LAST:event_recordTimeLimitSliderPropertyChange

    /**
     * Action event method for the recording time limit slider being changed. 
     * Updates the time limit label to reflect the chosen value.  
     * @param evt The dialog event.  
     */
    private void recordTimeLimitSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_recordTimeLimitSliderStateChanged
        JSlider slider = (JSlider) evt.getSource();
        if (!slider.getValueIsAdjusting()){
            int timeValue = (int) slider.getValue();
            this.setRecordTimeLimitLabel(timeValue);
            this.recorder.setRecordTimeLimitInSeconds(timeValue);
        }
    }//GEN-LAST:event_recordTimeLimitSliderStateChanged
    
    /**
     * This method sets the dialog position using the parent component to 
     * position itself on top of the parent.  
     * An generic object parameter is required so that either a GUI or 
     * ShareDialog instance can be used as the parent dialog.  
     * @param parentComp The parent component used to position this dialog on 
     * top of.  
     */
    private void setDialogPosition(Object parentComp){
        JFrame frame = (JFrame) parentComp;
        Point pos = frame.getLocation();
        int px = (int)(pos.getX());
        int py = (int)(pos.getY());
        int x  = (px + (frame.getWidth() / 2) - (this.getWidth() / 2));
        int y  = (py + (frame.getHeight() / 2) - (this.getHeight() / 2));
        Point newPos = new Point(x, y);
        this.setLocation(newPos);
    }
    
    /**
     * Set method which updates the main label text for this dialog. 
     * @param text The desired label text.  
     */
    public void setLabelText(String text){
        this.label.setText(text);
    }
    
    /**
     * Set method which updates the voice recording time limit.   
     * @param timeLimitInSeconds The desired time limit in seconds. 
     */
    public void setRecordTimeLimitLabel(int timeLimitInSeconds){
        this.recordTimeLimitLabel.setText(String.format(
                "Record time limit : %d", timeLimitInSeconds));
    }
    
    /**
     * Sets this dialog to having finished a voice recording by enabling certain 
     * components such as the play button etc.  
     */
    public void setGuiToFinishedRecording(){
        this.parent.setRecordingCount(this.parent.getRecordCount() + 1);
        setLabelText("Finished recording : #" + this.parent.getRecordCount());
        this.playButton.setEnabled(true);
        this.selectRecordingButton.setEnabled(true);
        this.selectRecordingButton.setText("Select Recording #" + 
                                           this.parent.getRecordCount());
    }
    
    /**
     * Displays a JOptionPane dialog with voice recording information.
     * @return True if the OK option has been clicked by the user. Otherwise
     * false is returned.
     */
    public boolean displayRecordingDialog(){
        String text = String.format(
                "The voice recorder will now begin for %d seconds\n"
                + "Click OK and start speaking\n"
                + "You can playback a recording afterwards\n"
                + "If you don't like it simply record another",
                (int) this.recorder.getRecordTimeLimitInSeconds());
        int response = JOptionPane.showConfirmDialog(this, text, "Voice Recording", 
                                                     JOptionPane.OK_CANCEL_OPTION);
        if (response == JOptionPane.OK_OPTION)
            return true;
        else
            return false;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel label;
    private javax.swing.JButton playButton;
    private javax.swing.JLabel recordTimeLimitLabel;
    private javax.swing.JSlider recordTimeLimitSlider;
    private javax.swing.JButton selectRecordingButton;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables
}